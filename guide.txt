npx create-next-app@lates
  ✔  What is your project named? … ./
  ✔ Would you like to use TypeScript? … No / Yes
  ✔ Would you like to use ESLint? … No / Yes
  ✔ Would you like to use Tailwind CSS? … No / Yes
  ✔ Would you like to use `src/` directory? … No / Yes
  ✔ Would you like to use App Router? (recommended) … No / Yes
  ✔ Would you like to customize the default import alias (@/*)? … No / Yes

  *** Err : node -v > 15.xx
    https://velog.io/@woong3e/node-version-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8%ED%95%98%EA%B8%B0

npm run dev (dev server)

Route
  Routing only works inside of app folder
  add folder in app folder (folder name will be shown in url)
  add page.tsx in that folder. It will be the content of the page.
  if you don't make make page.tsx inside the folder, it won't render the page and show 404 error.

app
  layout - root
  page - children

icon.png inside of app folder automatically shows on favicon

components
  same as Vanilla React
  components folder can be anywhere!
  ** ref https://nextjs.org/docs/app/building-your-application/routing/colocation 
  If it is made in root directory, you can use "@" instead of "../"

Reserved Filenames
  Important: These filenames are only reserved when creating them inside of the app/ folder (or any subfolder). 
  Outside of the app/ folder, these filenames are not treated in any special way.
  
  list of reserved filenames in NextJS 
    page.js => Create a new page (e.g., app/about/page.js creates a <your-domain>/about page)
    layout.js => Create a new layout that wraps sibling and nested pages
    not-found.js => Fallback page for "Not Found" errors (thrown by sibling or nested pages or layouts)
    error.js => Fallback page for other errors (thrown by sibling pages or nested pages or layouts)
    loading.js => Fallback page which is shown whilst sibling or nested pages (or layouts) are fetching data
    route.js => Allows you to create an API route (i.e., a page which does NOT return JSX code but instead data, e.g., in the JSON format)
    
  You also find a list with all supported filenames & detailed explanations 
  in the official docs: https://nextjs.org/docs/app/api-reference/file-conventions

Dynamic Routes
  https://nextjs.org/docs/app/building-your-application/routing/dynamic-routes
  
Sass
  module is built-in in NextJS
  https://nextjs.org/docs/app/building-your-application/styling/sass

  ref: https://velog.io/@heumheum2/Nextjs-%EC%97%90%EC%84%9C-scss-%EC%84%A4%EC%A0%95
    npm install -D sass
    auto complete => npm install -D typescript-plugin-css-modules

  https://velog.io/@rubi0624/ESLint-Prettier-Stylelint-%EC%84%A4%EC%A0%95
  
  Postcss
    https://h-owo-ld.tistory.com/m/184

Global css  
  If you want to apply global css at layout.tsx,
  global.css(or scss) file needs to be in app folder

Google font
  import { Oswald } from 'next/font/google';
  const oswald = Oswald({ subsets: ['latin'] });
  .
  .
  <html className={`${oswald.className}`}>
    <body>{children}</body>
  </html>

  *** button tag needs to must have "font-family: inherit;" attribute

Image
  *** If you don't want to import every single image, you have to put image files in public folder
  import imageMainBanner from '@/images/main_banner.jpg';
    
  - img tag
    <img src={imageMainBanner.src} alt="" width={100} height={770} />

  - Image from next/image
    <Image src={imageMainBanner} alt="" width={100} height={770} />

  - lazy loading
    It loads only when it is really visible

  - priority
    If it is visible all the time, use priority property!

  - fill
    If you don't know the dimensions, you can use "fill" instead of setting "width" and "height"

React Server Components vs. Client Components

  Vanilla React Apps render on the client
    Server Side (Backend) => Client Side (Frontend)
    Pre-rendered on the server but also potentially on the client
    Client side interactivity

  NextJS build Fullstack Applications
    Render only on the server
    Server Side (Backend) + Client Side (Frontend)
    Less client side JS, great for SEO
    
    *** To use client component like useState 
      => write "use client" on the top of the file 
    
      Try to make client component separable 
      to make most of the component on the server side 
      
        ex) usePathname
            If you are using usePathname hook, make that part with the new component

SQLite Database
  1. command - npm install better-sqlite3

  2. setup initdb.js file

  3. command - node initdb.js
     => It make meals.db file

loading
  If you make loading.tsx file next to the page component, 
  it will show the loading page until the data is loaded
  It will be also affcted to the nested pages!

  - Suspense
    Handle loading states and show fallback content until the data has been loaded
    Make the data part separate from the page component
      and use the component in the page component, and wrap it with suspense tag.
    It will make loading part partially, not as a page

Handling error  
  If the page has error or not found situation, it will show each component on the page.  
  - error : add error.tsx file inside the app folder
  - not found : add not-found.tsx file inside the app folder
                ++ Throwing Not Found Errors For Individual 
                    if (!item) {
                      notFound();
                    }

useRef
  const imageInputRef = useRef<HTMLInputElement | null>(null);
  function handleClickBtn() {
    // need to have this if() part or it will throw you an error!
    // like.....  "'imageInputRef.current' is possibly 'null'."
    if (imageInputRef.current) { 
      imageInputRef.current.click();
    }

    <input
      type="file"
      id={name}
      accept="image/png, image/jpeg"
      name={name}
      ref={imageInputRef}
    />
  }

'use server'
  it can not be used with 'use client'